generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model Article {
  id                  String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  type                String
  title               String
  description         String
  size                String
  unitPriceInEuros    Float
  illustrations       Illustration[]
  stock               Stock?
}

model Illustration {
  id                  String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  title               String
  url                 String
  articleId           String        @db.ObjectId
  article             Article       @relation(fields: [articleId], references: [id], onDelete: Cascade)
}

model Stock {
  id                  String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  available           Int
  alertWhenBelow      Int?
  articleId           String        @unique @db.ObjectId
  article             Article       @relation(fields: [articleId], references: [id], onDelete: Cascade)
}

model Actualite {
  id                  String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  title               String        @unique
  description         String?
  image               String?
}

model User {
  id                  String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  name                String        @unique
  email               String?       @unique
  emailVerified       DateTime?
  image               String?       // profile picture
  password            String?
  role                Int           // 0 = admin, 1 = user
  accounts            Account[]
  sessions            Session[]
}

model Account {
  id                  String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  userId              String        @db.ObjectId
  type                String
  provider            String
  providerAccountId   String
  refresh_token       String?       @db.String
  access_token        String?       @db.String
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?       @db.String
  session_state       String?
  user                User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id                  String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  sessionToken        String        @unique
  userId              String        @db.ObjectId
  expires             DateTime
  user                User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier          String        @unique
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  token               String        @id @default(cuid()) @map("_id")
  expires             DateTime

  @@unique([identifier, token])
}

model Message {
  id                  String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  name                String
  email               String
  message             String
}